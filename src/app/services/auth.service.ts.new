import { Injectable } from '@angular/core';
import { Observable, BehaviorSubject } from 'rxjs';
import { tap } from 'rxjs/operators';
import { AuthResponse } from '../models/auth-response.model';
import { LoginRequest } from '../models/login-request.model';
import { RegisterRequest } from '../models/register-request.model';
import { Router } from '@angular/router';
import { User } from '../models/user.model';
import { ApiService } from './api.service';

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  private endpoint = 'api/auth';
  private tokenKey = 'auth_token';
  private userKey = 'auth_user';
  private authStatusSubject = new BehaviorSubject<boolean>(this.hasValidToken());
  
  // Observable that components can subscribe to for auth status changes
  public authStatus$ = this.authStatusSubject.asObservable();
  
  constructor(
    private apiService: ApiService,
    private router: Router
  ) {
    // Check token validity on service initialization
    this.checkTokenValidity();
  }
  
  /**
   * Login user with credentials
   */
  login(request: LoginRequest): Observable<AuthResponse> {
    return this.apiService.post<AuthResponse>(`${this.endpoint}/login`, request)
      .pipe(
        tap(response => {
          this.storeAuthData(response);
          this.authStatusSubject.next(true);
        })
      );
  }
  
  /**
   * Register new user
   */
  register(request: RegisterRequest): Observable<AuthResponse> {
    return this.apiService.post<AuthResponse>(`${this.endpoint}/register`, request)
      .pipe(
        tap(response => {
          this.storeAuthData(response);
          this.authStatusSubject.next(true);
        })
      );
  }
  
  /**
   * Logout the current user
   */
  logout(): void {
    localStorage.removeItem(this.tokenKey);
    localStorage.removeItem(this.userKey);
    this.authStatusSubject.next(false);
    this.router.navigate(['/login']);
  }
  
  /**
   * Check if user is authenticated
   */
  isAuthenticated(): boolean {
    return this.hasValidToken();
  }
  
  /**
   * Get the current authentication token
   */
  getToken(): string | null {
    return localStorage.getItem(this.tokenKey);
  }
  
  /**
   * Get the current user object from local storage
   */
  getCurrentUser(): User | null {
    const userJson = localStorage.getItem(this.userKey);
    if (userJson) {
      const user = JSON.parse(userJson) as User;
      
      // Add convenience properties
      if (user.role) {
        user.isAdmin = user.role === 'ADMIN';
        user.isSupplier = user.role === 'SUPPLIER';
        user.isUser = user.role === 'USER';
      }
      
      return user;
    }
    return null;
  }
  
  /**
   * Update user data in local storage
   */
  updateUserData(user: Partial<User>): void {
    const currentUser = this.getCurrentUser();
    if (currentUser) {
      const updatedUser = {...currentUser, ...user};
      localStorage.setItem(this.userKey, JSON.stringify(updatedUser));
    }
  }
  
  /**
   * Check if the current token is valid
   */
  private hasValidToken(): boolean {
    const token = this.getToken();
    if (!token) {
      return false;
    }
    
    try {
      const payload = this.parseJwt(token);
      const expirationDate = payload.exp * 1000; // Convert to milliseconds
      return Date.now() < expirationDate;
    } catch (e) {
      return false;
    }
  }
  
  /**
   * Store authentication data in local storage
   */
  private storeAuthData(response: AuthResponse): void {
    localStorage.setItem(this.tokenKey, response.token);
    
    const user: User = {
      username: response.username,
      role: response.role,
      email: response.email,
      id: response.id,
      name: response.name,
      firstname: response.firstname,
      lastname: response.lastname,
      isAdmin: response.role === 'ADMIN',
      isSupplier: response.role === 'SUPPLIER',
      isUser: response.role === 'USER'
    };
    
    localStorage.setItem(this.userKey, JSON.stringify(user));
  }
  
  /**
   * Parse JWT token to get payload
   */
  private parseJwt(token: string): any {
    const base64Url = token.split('.')[1];
    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
    const jsonPayload = decodeURIComponent(
      atob(base64)
        .split('')
        .map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))
        .join('')
    );
    return JSON.parse(jsonPayload);
  }
  
  /**
   * Check token validity and update auth status
   */
  private checkTokenValidity(): void {
    const isAuthenticated = this.hasValidToken();
    this.authStatusSubject.next(isAuthenticated);
    
    if (!isAuthenticated) {
      localStorage.removeItem(this.tokenKey);
      localStorage.removeItem(this.userKey);
    }
  }
}
